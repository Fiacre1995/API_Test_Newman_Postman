{
	"info": {
		"_postman_id": "c7acca8b-54f2-45b1-9fc9-3da85b052c8d",
		"name": "Cllection_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26208054",
		"_collection_link": "https://restless-robot-924502.postman.co/workspace/dac762f1-592f-493f-9dd8-e0291fa8e1dd/collection/26208054-c7acca8b-54f2-45b1-9fc9-3da85b052c8d?action=share&source=collection_link&creator=26208054"
	},
	"item": [
		{
			"name": "ListeBooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Vérifier que le statut est 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"$ref\": \"#/definitions/WelcomeElement\"\r",
							"    },\r",
							"    \"definitions\": {\r",
							"        \"WelcomeElement\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"name\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"type\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"available\": {\r",
							"                    \"type\": \"boolean\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"available\",\r",
							"                \"id\",\r",
							"                \"name\",\r",
							"                \"type\"\r",
							"            ],\r",
							"            \"title\": \"WelcomeElement\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Vérifier que la réponse rétourné est au bon format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_base}}books/",
					"host": [
						"{{url_base}}books"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Généré Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomNumber = Math.floor(Math.random() * 1000000) + 1;\r",
							"pm.environment.set(\"randomNumber\", randomNumber);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Vérifier que le statut est 201\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//Vérifier la présence du token\r",
							"pm.test(\"Le token est présent\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.accessToken).to.exist;\r",
							"});\r",
							"\r",
							"//Vérifier qu'il correspond au format attendu\r",
							"const schema = {\r",
							"    \"definitions\": {\r",
							"        \"Welcome\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"accessToken\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"accessToken\"\r",
							"            ],\r",
							"            \"title\": \"Welcome\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Vérifier que la réponse rétourné est au bon format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//Stocker le token dans une variable \r",
							"let json = pm.response.json();\r",
							"pm.environment.set(\"accessToken\", json.accessToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientName\": \"test{{randomNumber}}\",\r\n    \"clientEmail\": \"test{{randomNumber}}@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/api-clients/",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Passer une commande",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Vérifier que le statut est 201\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"//Vérifier qu'il correspond au format attendu\r",
							"const schema = {\r",
							"    \"definitions\": {\r",
							"        \"Welcome\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"created\": {\r",
							"                    \"type\": \"boolean\"\r",
							"                },\r",
							"                \"orderId\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"created\",\r",
							"                \"orderId\"\r",
							"            ],\r",
							"            \"title\": \"Welcome\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Vérifier que la réponse rétourné est au bon format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"bookId\": 1,\r\n\"customerName\": \"Une si longue lettre\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}orders/",
					"host": [
						"{{url}}orders"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Lister les commandes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Vérifier que le statut est 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"$ref\": \"#/definitions/WelcomeElement\"\r",
							"    },\r",
							"    \"definitions\": {\r",
							"        \"WelcomeElement\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"bookId\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"customerName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"createdBy\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"quantity\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"timestamp\": {\r",
							"                    \"type\": \"integer\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"bookId\",\r",
							"                \"createdBy\",\r",
							"                \"customerName\",\r",
							"                \"id\",\r",
							"                \"quantity\",\r",
							"                \"timestamp\"\r",
							"            ],\r",
							"            \"title\": \"WelcomeElement\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\"Vérifier que la réponse rétourné est au bon format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}orders",
					"host": [
						"{{url}}orders"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url_base",
			"value": "https://simple-books-api.glitch.me/",
			"type": "string"
		}
	]
}